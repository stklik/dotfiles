#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


function mkvenv() {
	python3 -m venv $@; cd $@; source bin/activate;
}

# creates a trash command (and a folder)
# if it doesn't exist by default
if [ ! $(command -v trash) ]; then
	mkdir -p ~/.Trash/ ;
	function trash() {
		mv -iv "$@" ~/.Trash/ ;
	}
fi


# use 'web' to open a browser
if type sensible-browser > /dev/null 2>&1; then # GNU `ls`
    function web() {
        sensible-browser $@ </dev/null >/dev/null 2>&1 & disown
    }
else  # Mac ?
    function web() {
        # Not nice, should actually be standard browser instead of chrom... But what shall we do?
        chrome $@
    }
fi


# overload spotify so we can add some functions.
# note, that this relies on either "shpotify" or the oh-my-zsh 'osx' plugin

# load original spotify sources from the oh-my-zsh plugin
source ${ZSH}/plugins/osx/spotify

# save original spotify to _spotify
eval "`declare -f spotify | sed 's/spotify ()/_spotify ()/'`" #backup old spotify to _spotify
function spotify() {
	if [ ! $(command -v _spotify) ]; then
		echo "No shpotify found. Please add 'osx' to .zshrc'"
		return 1;
	fi

        if [ $# -eq 0 ]; then
		echo "Launching default playlist (Have a Great Day!)";
		spotify play uri spotify:playlist:37i9dQZF1DX7KNKjOK0o75;
		spotify vol 0;
		spotify next;
		spotify vol 100;
		spotify shuffle;
		spotify repeat;
	elif [ "$1" = "play" ]; then
		open -a "Spotifree";
		_spotify $@;
	elif [ "$1" = "shuffle" ]; then
		if $(spotify toggle shuffle | grep -q "false") ; then
			spotify toggle shuffle;
		fi
	elif [ "$1" = "repeat" ]; then
		if $(spotify toggle repeat | grep -q "false") ; then
			spotify toggle repeat;
		fi
	elif [ "$1" = "quit" ]; then
		_spotify quit;
		osascript -e 'quit app "Spotifree"';
	else
		_spotify $@;
	fi
}
