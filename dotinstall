#!/usr/bin/env bash

# inspired by https://github.com/necolas/dotfiles

set -e
set -u

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/stklik/dotfiles/tarball/master"

# ----------------------------------
# Download dotfiles
# ----------------------------------

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then

    # check if curl exists, try installing if not
    if [[ ! $(command -v curl) ]]; then
        if [[ $(command -v apt) ]]; then
            echo "Didn't find cURL, but we need it. Installing it now!"
            sudo apt install -v curl;
        elif [[ $(command -v brew) ]]; then
            echo "Didn't find cURL, but we need it. Installing it now!"
            brew install curl 2>/dev/null;
        else
            echo "Failed to download dotfiles!"
            echo "cURL not installed, but I don't know how to install it...";
            echo "Install it please, so I can proceed!";
            exit 1;
        fi
    fi

    printf "Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

# ----------------------------------
# Software Installation with arg 'full' (optional)
# ----------------------------------

# check if we're bootstrapping
# then we need to install everything
if [ $# -eq 0 ]; then
    # skip installation of files
    echo "INFO: Didn't see argument 'full'. Not installing any software. Config only.";
elif [ "$1" = "full" ]; then
    # figure out which os we're on
    if [ "$(uname)" == "Darwin" ]; then
        echo "Triggering full Mac bootstrapping...";
        sh ${DOTFILES_DIRECTORY}/bootstrap.mac.sh
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        echo "Triggering full Linux bootstrapping...";
        sh ${DOTFILES_DIRECTORY}/bootstrap.linux.sh
    fi
else
    echo "Don't understand argument '$1'. The only valid argument is 'full'.";
fi


# ----------------------------------
echo "Copying actual dotfiles & folders"
# ----------------------------------

timestamp=`date +%Y-%m-%d_%H-%M-%S`
DOTFILES_BACKUP="${HOME}/.dotfiles-backup_$timestamp"

echo "Dotfiles Backup Folder is ${DOTFILES_BACKUP}"
mkdir -p ${DOTFILES_BACKUP};
for file in .{aliases,bash_profile,bashrc,exports,extra,functions,gitconfig,gitignore,path,vimrc,zshrc}; do
    # if the file exists, back it up
    [ -r "${HOME}/$file" ] && [ -f "${HOME}/$file" ] && mv ${HOME}/$file ${DOTFILES_BACKUP};
    # now copy the one from here to home
	[ -r "$file" ] && [ -f "$file" ] && cp ${DOTFILES_DIRECTORY}/$file ${HOME}/$file && echo "$file";
done;
unset file;

# copy folders (same as above, not really sure why I'm duplicating...)
# for dir in .{vim}; do
    # if the file exists, back it up
dir=".vim"
[ -r "${HOME}/$dir" ] && [ -d "${HOME}/$dir" ] && mv ${HOME}/$dir ${DOTFILES_BACKUP};
# now copy the one from here to home
[ -r "$dir" ] && [ -d "$dir" ] && cp  -R ${DOTFILES_DIRECTORY}/$dir ${HOME}/$dir && echo "$dir";
# done;
unset dir;
